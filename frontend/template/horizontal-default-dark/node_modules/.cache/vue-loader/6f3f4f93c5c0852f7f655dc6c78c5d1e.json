{"remainingRequest":"/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/src/pages/widgets/index.vue?vue&type=template&id=f2b16ec4&scoped=true&","dependencies":[{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/src/pages/widgets/index.vue","mtime":1582112975577},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/node_modules/cache-loader/dist/cjs.js","mtime":1582112942198},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1582112973576},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/node_modules/cache-loader/dist/cjs.js","mtime":1582112942198},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/horizontal-default-dark/node_modules/vue-loader/lib/index.js","mtime":1582112973573}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}