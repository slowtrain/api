{"remainingRequest":"/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/src/pages/samples/e-commerce/project-list.vue?vue&type=template&id=092ef144&","dependencies":[{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/src/pages/samples/e-commerce/project-list.vue","mtime":1582090860703},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/node_modules/cache-loader/dist/cjs.js","mtime":1582031575038},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1582031594961},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/node_modules/cache-loader/dist/cjs.js","mtime":1582031575038},{"path":"/Users/jyothish/Documents/justdo-vue-pro/template/vertical-default-dark/node_modules/vue-loader/lib/index.js","mtime":1582031594959}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}